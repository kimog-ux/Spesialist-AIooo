import telebot
from telebot import types
from request import gpt_request

def giga(message):
    bot.send_message(message.chat.id,gpt_request(message.text))
    return


bot = telebot.TeleBot(open('api.txt').read())
btn1 = types.KeyboardButton('Расписание')
btn2 = types.KeyboardButton('Домашнее задание')
btn3 = types.KeyboardButton('Информация о школе')
btn4 = types.KeyboardButton('Успеваемость')
btn5 = types.KeyboardButton('Звонки')
btn6 = types.KeyboardButton('Фото')
btn7 = types.KeyboardButton('Вопрос GigaChat')

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup.add(btn1,btn2,btn3,btn4,btn5,btn6,btn7)
@bot.message_handler(commands=['start'])
def send_wecome(message):
    bot.reply_to(message, "Привет! Я твой учебный бот!")
    bot.send_message(message.chat.id, "Выберите действие:",
                     reply_markup=markup)
@bot.message_handler(func=lambda message:True)
def handle_buttons(message):
    if message.text == 'Расписание':
        bot.reply_to(message, "Сейчас каникулы, расписание будет после 1 сентября.")
        inline_markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton(
            text="Летние активности",
            url="https://leto.mos.ru/"
        )
        inline_markup.add(btn)
        bot.send_message(message.chat.id, "Лучше посмотри летние активности",
                         reply_markup=inline_markup)
        
    elif message.text == 'Информация о школе':
        bot.reply_to(message, "Информация обновляется.")
        inline_markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton(
            text="Актуальная информация",
            url="https://sch338tn.mskobr.ru/"
        )
        inline_markup.add(btn)
        bot.send_message(message.chat.id, "Вся информация в прикрепленной ссылке",
                         reply_markup=inline_markup)
        
    elif message.text == "Домашнее задание":
        bot.reply_to(message, "Обрати внимание на рекомендованный список литературы.")
        inline_markup = types.InlineKeyboardMarkup()  
        doc = open('Список литературы.pdf','rb')
        bot.send_document(message.chat.id, doc,caption='Домашнее задание',
                          visible_file_name='Список литературы.pdf')

    elif message.text == "Успеваемость":
        bot.reply_to(message, "Авторизируйся в МЭШ.")
        inline_markup = types.InlineKeyboardMarkup() 
    
    elif message.text == "Звонки":
        bot.reply_to(message, "Расписание звонков на 2025 г.")
        ph = open('Расписание звонков.jpg', 'rb')
        bot.send_photo(message.chat.id,ph,'Звонки')
        url = 'https://polinka.top/pics1/uploads/posts/2023-11/thumbs/1700233018_polinka-top-p-kartinka-budni-uchitelya-4.jpg'
        bot.send_photo(message.chat.id,url,'Звонки')

    elif str(message.text).lower() == 'привет':
        bot.reply_to(message, "Привет!")

    elif message.text == 'Фото':
        try:
            ph = open('name_file.jpg','rb')
            bot.send_photo(message.chat.id,ph,'Ваше последнее фото')
        except BaseException:
            bot.reply_to(message, "Фото отсутствует, отправьте новое.")

    elif message.text == 'Вопрос GigaChat':
        msg = bot.reply_to(message, "Задай вопрос")
        bot.register_next_step_handler(msg, giga)

         
        
@bot.message_handler(content_types=['photo'])
def photoes(message):
    file_id = message.photo[-1].file_id
    file_info = bot.get_file(file_id)
    download_file = bot.download_file(file_info.file_path)
    with open('name_file.jpg', 'wb') as new_f:
        new_f.write(download_file)
    bot.reply_to(message,'Фото сохранено')
    
bot.polling()
